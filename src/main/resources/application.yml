server:
  port: 8080
  servlet:
    context-path: /api

spring:
  application:
    name: weather-application
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:file:./db;INIT=CREATE SCHEMA IF NOT EXISTS weather;DATABASE_TO_LOWER=true;
    username: h2
    password: h2
    hikari:
      minimum-idle: 2
      maximum-pool-size: 4
      schema: weather
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
  liquibase:
    change-log: classpath:db/migrations/liquibase-changelog.xml
    url: ${spring.datasource.url}
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
    default-schema: ${spring.datasource.hikari.schema}
  kafka:
    consumer:
      topic: weather
      auto-offset-reset: earliest
      bootstrap-servers: localhost:29092
      group-id: kafka
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: com.fintech.fintech.data.model
    producer:
      acks: -1
      bootstrap-servers: localhost:29092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer


application:
  weather-api:
    base-url: http://api.weatherapi.com/v1
    current-weather-uri: /current.json?lang={language}&q={city}&key={key}
    api-key: ${api.key}
    default-language: ru
  weather:
    moscow:
      cron: '* */15 * * * *'
    saint-petersburg:
      cron: '* */16 * * * *'
    kazan:
      cron: '* */17 * * * *'
    sochi:
      cron: '* */18 * * * *'
    krasnodar:
      cron: '* */19 * * * *'

cache:
  course:
    size: 10 # максимальное количество элементов в кэше

springdoc:
  swagger-ui:
    path: swagger.html


management:
  endpoints:
    web:
      exposure:
        include: health, prometheus
  server:
    port: 8081
